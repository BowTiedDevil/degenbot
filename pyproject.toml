[project]
name = "degenbot"
version = "0.4.3"
authors = [
    { name="BowTiedDevil", email="devil@bowtieddevil.com" },
]
description = "Python classes to aid rapid development of Uniswap (V2, V3, V4), Curve V1, and Solidly V2 arbitrage bots on EVM-compatible blockchains"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [    
    "cvxpy >= 1.6, <2",
    "pydantic >= 2.10, <3",
    "scipy >=1.15, <1.16",
    "watchdog >= 6.0, <7",
    "web3 >=7.9, <8",
]
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
]

[project.urls]
Homepage = "https://www.degencode.com"
Repository = "https://github.com/BowTiedDevil/degenbot"
Tracker = "https://github.com/BowTiedDevil/degenbot/issues"
Twitter = "https://twitter.com/BowTiedDevil"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:", # exclude type checking imports and checks
    "return NotImplemented", # required for __eq__, __lt__, __gt__
    "def __hash__",
    "def __repr__",
    "def __str__",
    "logger.debug",
    "case _:", # exclude catch-all
]

[tool.coverage.run]
source = ["src/degenbot"]
omit = [
    "abi.py",
    "exceptions.py",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
files=[
    "src/degenbot",
    "tests/",
]
python_version = "3.12"
python_executable = ".venv/bin/python"
untyped_calls_exclude = "cvxpy"

[[tool.mypy.overrides]]
module="tests/test_cvxpy.py"
disable_error_code = [
    "attr-defined",
]

[[tool.mypy.overrides]]
module="degenbot.*"
strict = true

[[tool.mypy.overrides]]
module="tests.*"
disable_error_code = [
    "no-untyped-def",
]

[[tool.mypy.overrides]]
module=[
    "eth_abi.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [    
#    "SLF",      # flake8-self
#    "PIE",      # flake8-pie
#    "C90",      # mccabe
#    "D",        # pydocstyle
    "PTH",      # builtin-open
    "ERA",      # eradicate
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "EM",       # flake8-errmsg
    "FA",       # flake8-future-annotations
    "N",        # flake8-naming
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "I",        # isort
    "E", "W",   # pycodestyle
    "F",        # pyflakes
    "PL",       # pylint
    "PERF",     # perflint
    "UP",       # pyupgrade
    "FURB",     # refurb
    "RUF",      # ruff-specific rules
    "TRY",      # tryceratops
]
ignore = [
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
    "N818",     # error-suffix-on-exception-name
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004", # Many swap amount tests compare "magic" values â€” transforming to named constants is not worthwhile
    "ERA",
    "C4",
    "T20",
]

[tool.pytest.ini_options]
addopts = "--import-mode=importlib --cov=./src/degenbot --cov-branch --cov-report=html"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = "src"
python_files = "test_*.py"
testpaths = "tests"

[tool.uv]
dev-dependencies = [
    "hypothesis",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "python-dotenv",
]
