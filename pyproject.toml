[build-system]
requires = ["maturin>=1.9,<2"]
build-backend = "maturin"

[project]
name = "degenbot"
version = "0.5.0b3"
authors = [
    { name="BowTiedDevil", email="devil@bowtieddevil.com" },
]
description = "Python classes to aid rapid development of Uniswap (V2, V3, V4), Curve V1, and Solidly V2 arbitrage bots on EVM-compatible blockchains"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic >= 1.17.0, <2",
    "cchecksum >=0.3.3, <1",
    "click >=8.3.0, <9",
    "cvxpy >=1.7.3, <2",
    "pydantic >=2.12.3, <3",
    "pydantic-settings >=2.11.0, <3",
    "scipy >=1.16.2, <2",
    "sqlalchemy >=2.0.44, <3",
    "tenacity >=9.1.2, <10",
    "tomlkit >= 0.13.3, <1",
    "tqdm >= 4.67.1, <5",
    "ujson >= 5.11.0, <6",
    "web3 >=7.14.0, <8",
]
license = {text = "MIT"}
license-files = ["LICENSE"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
]

[project.urls]
Homepage = "https://www.degencode.com"
Repository = "https://github.com/BowTiedDevil/degenbot"
Tracker = "https://github.com/BowTiedDevil/degenbot/issues"
Twitter = "https://twitter.com/BowTiedDevil"

[project.scripts]
degenbot = "degenbot.cli:cli"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:", # exclude type checking imports and checks
    "return NotImplemented", # required for __eq__, __lt__, __gt__
    "def __hash__",
    "def __repr__",
    "def __str__",
    "logger.debug",
    "case _:", # exclude catch-all
]

[tool.coverage.run]
source = ["src/degenbot"]
omit = [
    "**/exceptions/**/*.py",
    "**/migrations/**/*.py",
    "**/cli/**/*.py",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
files=[
    "src/degenbot",
    "tests/",
]
python_version = "3.12"
python_executable = ".venv/bin/python"
untyped_calls_exclude = "cvxpy"

[[tool.mypy.overrides]]
module="tests/test_cvxpy.py"
disable_error_code = [
    "attr-defined",
]

[[tool.mypy.overrides]]
module="degenbot.*"
strict = true

[[tool.mypy.overrides]]
module="tests.*"
disable_error_code = [
    "no-untyped-def",
]

[[tool.mypy.overrides]]
module=[
    "eth_abi.*",
    "scipy.*",
    "tqdm.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
#    "DOC",      # pydoclint
#    "D",        # pydocstyle
#    "COM",      # flake8-commas
#    "FIX",      # flake8-fixme
    "ERA",      # eradicate
    "ANN",      # flake8-annotations
    "ASYNC",    # flake8-async
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT",      # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "EM",       # flake8-errmsg
    "FA",       # flake8-future-annotations
    "ICN",      # flake8-import-conventions
    "LOG",      # flake8-logging
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
#    "TD",       # flake8-todos
    "PTH",      # flake8-use-pathlib
    "FLY",      # flynt
    "NPY",      # numpy-specific
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "I",        # isort
    "C90",      # mccabe
    "N",        # pep8-naming
    "E", "W",   # pycodestyle
    "F",        # pyflakes
    "PL",       # pylint
    "PERF",     # perflint
    "UP",       # pyupgrade
    "FURB",     # refurb
    "RUF",      # ruff-specific rules
    "TRY",      # tryceratops
]
ignore = [
    "N818",     # error-suffix-on-exception-name
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
    "S101",     # asserts are used often, but not as input validation
]
logger-objects = [
    "logging.logger",
    "degenbot.logger",
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN", # type annotations for tests are low priority
    "C4",
    "C90", # high complexity tests are acceptable
    "ERA",
    "FBT",
    "PLR2004", # Many swap amount tests compare "magic" values â€” transforming to named constants is not worthwhile
    "S", # asserts are expected for testing
    "SLF",
    "T20",
]

[tool.pytest.ini_options]
addopts = [
    "--numprocesses", "4",
    "--dist", "worksteal",
    "--reruns", "5",
    "--rerun-except", "AssertionError",
    "--import-mode", "importlib",
    "--cov", "src/degenbot",
    "--cov-branch",
    "--cov-report", "html",
    "--random-order"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = "src"
python_files = "test_*.py"
testpaths = "tests"
filterwarnings = ["ignore::DeprecationWarning:websockets.legacy"]


[dependency-groups]
dev = [
    "hypothesis",
    "maturin",
    "pytest",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-random-order",
    "pytest-rerunfailures",
    "pytest-sugar",
    "pytest-xdist",
    "python-dotenv",
]

[tool.uv]
cache-keys = [{file = "pyproject.toml"}, {file = "rust/Cargo.toml"}, {file = "rust/src/*.rs"}]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.maturin]
bindings = "pyo3"
profile = "release"
features = ["pyo3/extension-module"]
python-packages = ["degenbot"]

[tool.alembic]
# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/src/degenbot/migrations"
